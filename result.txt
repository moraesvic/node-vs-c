Creating and sorting random array with 10000000 integers, from 0 to 2147483647

JAVASCRIPT
Code executed in 11157 ms

C-Text
Code executed in 8548 ms

C-Binary (via buffer)
Code executed in 2183 ms

time ./text 10000000 > /dev/null

real	0m2,527s
user	0m2,483s
sys	  0m0,044s

time ./binary 10000000 > /dev/null

real	0m1,591s
user	0m1,566s
sys	  0m0,024s
Creating and sorting random array with 60000000 integers, from 0 to 2147483647
We are running in production mode.

JAVASCRIPT
Code executed in 74430 ms

C-Text
Code executed in 22374 ms

async C-Text

<--- Last few GCs --->

[10608:0x223da00]   115897 ms: Scavenge 660.7 (680.1) -> 645.1 (680.1) MB, 0.3 / 0.0 ms  (average mu = 0.993, current mu = 0.994) allocation failure 
[10608:0x223da00]   115928 ms: Scavenge 660.7 (680.1) -> 645.2 (680.1) MB, 0.6 / 0.0 ms  (average mu = 0.993, current mu = 0.994) allocation failure 
[10608:0x223da00]   115958 ms: Scavenge 660.7 (680.1) -> 645.1 (680.1) MB, 0.4 / 0.0 ms  (average mu = 0.993, current mu = 0.994) allocation failure 


<--- JS stacktrace --->

==== JS stack trace =========================================

    0: ExitFrame [pc: 0x1400eb2d452b]
Security context: 0x1990b2f2ee11 <JSObject>
    1: /* anonymous */ [0x2c54e6a85489] [/home/michael/webdev/node_vs_c/app.js:~43] [pc=0x1400eb206371](this=0x2c54e6a82201 <Socket map = 0x1a3ef6a75bb9>,data=0x23323573df41 <Uint8Array map = 0x1a3ef6a75f81>)
    2: emit [0x1990b2f79c71] [events.js:~147] [pc=0x1400eb37e6e9](this=0x2c54e6a82201 <Socket map = 0x1a3ef6a75bb9>,/* anonymous */=0x1990b2f72a71 <Str...

Creating and sorting random array with 60000000 integers, from 0 to 2147483647
We are running in production mode.

JAVASCRIPT
Code executed in 70630 ms

C-Text
Code executed in 22609 ms

async C-Text

<--- Last few GCs --->

[10887:0x1be2d30]   115154 ms: Scavenge 1783.0 (1808.1) -> 1767.5 (1808.1) MB, 5.0 / 0.0 ms  (average mu = 0.939, current mu = 0.926) allocation failure 
[10887:0x1be2d30]   115206 ms: Scavenge 1783.0 (1808.1) -> 1767.4 (1808.1) MB, 1.1 / 0.0 ms  (average mu = 0.939, current mu = 0.926) allocation failure 
[10887:0x1be2d30]   115260 ms: Scavenge 1783.0 (1808.1) -> 1767.5 (1808.1) MB, 1.3 / 0.0 ms  (average mu = 0.939, current mu = 0.926) allocation failure 


<--- JS stacktrace --->

==== JS stack trace =========================================

    0: ExitFrame [pc: 0x2a7b1345452b]
Security context: 0x07b28e2aee11 <JSObject>
    1: /* anonymous */ [0x355e91adae11] [/home/michael/webdev/node_vs_c/app.js:~43] [pc=0x2a7b134fe451](this=0x355e91adae49 <Socket map = 0x3d4f35275ab1>,data=0x31ef8b44f139 <Uint8Array map = 0x2cc08e80e599>)
    2: emit [0x7b28e2f9c71] [events.js:~147] [pc=0x2a7b1338d6bf](this=0x355e91adae49 <Socket map = 0x3d4f35275ab1>,/* anonymous */=0x07b28e2f2a71 <Stri...

Creating and sorting random array with 60000000 integers, from 0 to 2147483647
We are running in production mode.

JAVASCRIPT
Code executed in 67298 ms

C-Text
Code executed in 23163 ms

async C-Text

<--- Last few GCs --->

[11123:0x1572d30]   110105 ms: Scavenge 1782.8 (1808.1) -> 1767.3 (1808.1) MB, 0.9 / 0.0 ms  (average mu = 0.939, current mu = 0.925) allocation failure 
[11123:0x1572d30]   110136 ms: Scavenge 1782.8 (1808.1) -> 1767.4 (1808.1) MB, 1.1 / 0.0 ms  (average mu = 0.939, current mu = 0.925) allocation failure 
[11123:0x1572d30]   110167 ms: Scavenge 1782.8 (1808.1) -> 1767.3 (1808.1) MB, 0.9 / 0.0 ms  (average mu = 0.939, current mu = 0.925) allocation failure 


<--- JS stacktrace --->

==== JS stack trace =========================================

    0: ExitFrame [pc: 0x29e0719d452b]
Security context: 0x2f7cdbb2ee11 <JSObject>
    1: /* anonymous */ [0x345c53187801] [/home/michael/webdev/node_vs_c/app.js:~43] [pc=0x29e071907f51](this=0x345c53187839 <Socket map = 0x2e9c59575ab1>,data=0x1ae98d30dd01 <Uint8Array map = 0x3204a928e599>)
    2: emit [0x2f7cdbb79c71] [events.js:~147] [pc=0x29e07190cfdf](this=0x345c53187839 <Socket map = 0x2e9c59575ab1>,/* anonymous */=0x2f7cdbb72a71 <Str...

Creating and sorting random array with 40000000 integers, from 0 to 2147483647
We are running in production mode.

JAVASCRIPT
Code executed in 45444 ms

C-Text
Code executed in 16551 ms

async C-Text
Code executed in 13647 ms

C-Binary (via buffer)
Code executed in 7734 ms

async C-Binary (via buffer)
Code executed in 7939 ms

